/*
	Lightmetrica : A research-oriented renderer

	Copyright (c) 2014 Hisanari Otsu (hi2p.perim@gmail.com)

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.
*/

#include "pch.h"
#include <lightmetrica.test/base.h>
#include <lightmetrica.test/base.math.h>
#include <lightmetrica.test/stub.assets.h>
#include <lightmetrica.test/stub.config.h>
#include <lightmetrica/bitmaptexture.h>
#include <lightmetrica/bitmap.h>

namespace
{

	const std::string TextureNode_1 = LM_TEST_MULTILINE_LITERAL(
		<texture id="test" type="bitmap">
			<path>%s</path>
		</texture>
	);

	const std::string TextureNode_VerticalFlipTest = LM_TEST_MULTILINE_LITERAL(
		<texture id="test" type="bitmap">
			<path>%s</path>
			<vertical_flip>true</vertical_flip>
		</texture>
	);

	// --------------------------------------------------------------------------------

	// OpenEXR
	unsigned char test_exr[] = {
		0x76, 0x2f, 0x31, 0x01, 0x02, 0x00, 0x00, 0x00, 0x63, 0x68, 0x61, 0x6e,
		0x6e, 0x65, 0x6c, 0x73, 0x00, 0x63, 0x68, 0x6c, 0x69, 0x73, 0x74, 0x00,
		0x37, 0x00, 0x00, 0x00, 0x42, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x47, 0x00,
		0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
		0x01, 0x00, 0x00, 0x00, 0x52, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x63,
		0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x00, 0x63,
		0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x00, 0x01,
		0x00, 0x00, 0x00, 0x03, 0x64, 0x61, 0x74, 0x61, 0x57, 0x69, 0x6e, 0x64,
		0x6f, 0x77, 0x00, 0x62, 0x6f, 0x78, 0x32, 0x69, 0x00, 0x10, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
		0x00, 0x01, 0x00, 0x00, 0x00, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
		0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x00, 0x62, 0x6f, 0x78, 0x32, 0x69,
		0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x6c, 0x69, 0x6e,
		0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x00, 0x6c, 0x69, 0x6e, 0x65, 0x4f,
		0x72, 0x64, 0x65, 0x72, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x70, 0x69,
		0x78, 0x65, 0x6c, 0x41, 0x73, 0x70, 0x65, 0x63, 0x74, 0x52, 0x61, 0x74,
		0x69, 0x6f, 0x00, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x00, 0x04, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x80, 0x3f, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x57,
		0x69, 0x6e, 0x64, 0x6f, 0x77, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x00,
		0x76, 0x32, 0x66, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x57, 0x69,
		0x6e, 0x64, 0x6f, 0x77, 0x57, 0x69, 0x64, 0x74, 0x68, 0x00, 0x66, 0x6c,
		0x6f, 0x61, 0x74, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f,
		0x00, 0x41, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x19, 0x00, 0x00, 0x00, 0x78, 0x9c, 0x63, 0x60, 0x60, 0x68, 0x68,
		0x80, 0x60, 0x10, 0x68, 0x80, 0x83, 0xfd, 0x8e, 0x30, 0x0c, 0x82, 0x70,
		0x61, 0x00, 0x6e, 0xfa, 0x12, 0x81
	};
	unsigned int test_exr_len = 354;

	// Radiance HDR
	unsigned char test_hdr[] = {
		0x23, 0x3f, 0x52, 0x41, 0x44, 0x49, 0x41, 0x4e, 0x43, 0x45, 0x0a, 0x23,
		0x20, 0x4d, 0x61, 0x64, 0x65, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x46,
		0x72, 0x65, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x20, 0x33, 0x2e, 0x31,
		0x35, 0x2e, 0x34, 0x0a, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x3d, 0x33,
		0x32, 0x2d, 0x62, 0x69, 0x74, 0x5f, 0x72, 0x6c, 0x65, 0x5f, 0x72, 0x67,
		0x62, 0x65, 0x0a, 0x47, 0x41, 0x4d, 0x4d, 0x41, 0x3d, 0x31, 0x0a, 0x45,
		0x58, 0x50, 0x4f, 0x53, 0x55, 0x52, 0x45, 0x3d, 0x30, 0x0a, 0x0a, 0x2d,
		0x59, 0x20, 0x32, 0x20, 0x2b, 0x58, 0x20, 0x32, 0x0a, 0x80, 0x80, 0x80,
		0x81, 0x80, 0x00, 0x00, 0x81, 0x00, 0x00, 0x80, 0x81, 0x00, 0x00, 0x00,
		0x00
	};
	unsigned int test_hdr_len = 109;

	// PNG
	unsigned char test_png[] = {
		0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a, 0x00, 0x00, 0x00, 0x0d,
		0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02,
		0x08, 0x02, 0x00, 0x00, 0x00, 0xfd, 0xd4, 0x9a, 0x73, 0x00, 0x00, 0x00,
		0x15, 0x49, 0x44, 0x41, 0x54, 0x78, 0x9c, 0x05, 0xc1, 0x01, 0x01, 0x00,
		0x00, 0x00, 0x80, 0x10, 0xff, 0x4f, 0x17, 0xaa, 0x40, 0x18, 0x31, 0xdc,
		0x04, 0xfc, 0x74, 0x84, 0x53, 0x09, 0x00, 0x00, 0x00, 0x00, 0x49, 0x45,
		0x4e, 0x44, 0xae, 0x42, 0x60, 0x82
	};
	unsigned int test_png_len = 78;

	// --------------------------------------------------------------------------------

	const std::string Extension[]	= { "exr", "hdr", "png" };
	const unsigned char* Data[]		= { test_exr, test_hdr, test_png };
	const unsigned int Length[]		= { test_exr_len, test_hdr_len, test_png_len };

}

LM_NAMESPACE_BEGIN
LM_TEST_NAMESPACE_BEGIN

class BitmapTextureTest : public TestBase
{
public:

	ConfigNode GenerateNode(const std::string& path, const std::string& temp)
	{
		return config.LoadFromStringAndGetFirstChild(boost::str(boost::format(temp) % path));
	}

protected:

	BitmapTexture texture;
	StubAssets assets;
	StubConfig config;

};

TEST_F(BitmapTextureTest, Load)
{
	for (int format = 0; format < 3; format++)
	{
		TemporaryBinaryFile tmp("test." + Extension[format], Data[format], Length[format]);
		EXPECT_TRUE(texture.Load(GenerateNode(tmp.Path(), TextureNode_1), assets));
		
		// Check data
		size_t i = 0;
		const auto& data = texture.Bitmap().InternalData();

		// White
		EXPECT_TRUE(ExpectNear(data[i++], Math::Float(1)));
		EXPECT_TRUE(ExpectNear(data[i++], Math::Float(1)));
		EXPECT_TRUE(ExpectNear(data[i++], Math::Float(1)));

		// Red
		EXPECT_TRUE(ExpectNear(data[i++], Math::Float(1)));
		EXPECT_TRUE(ExpectNear(data[i++], Math::Float(0)));
		EXPECT_TRUE(ExpectNear(data[i++], Math::Float(0)));

		// Blue
		EXPECT_TRUE(ExpectNear(data[i++], Math::Float(0)));
		EXPECT_TRUE(ExpectNear(data[i++], Math::Float(0)));
		EXPECT_TRUE(ExpectNear(data[i++], Math::Float(1)));

		// Black
		EXPECT_TRUE(ExpectNear(data[i++], Math::Float(0)));
		EXPECT_TRUE(ExpectNear(data[i++], Math::Float(0)));
		EXPECT_TRUE(ExpectNear(data[i++], Math::Float(0)));
	}
}

TEST_F(BitmapTextureTest, Load_2)
{
	for (int format = 0; format < 3; format++)
	{
		TemporaryBinaryFile tmp("test." + Extension[format], Data[format], Length[format]);
		EXPECT_TRUE(texture.LoadAsset(tmp.Path()));

		// Check data
		size_t i = 0;
		const auto& data = texture.Bitmap().InternalData();

		// White
		EXPECT_TRUE(ExpectNear(data[i++], Math::Float(1)));
		EXPECT_TRUE(ExpectNear(data[i++], Math::Float(1)));
		EXPECT_TRUE(ExpectNear(data[i++], Math::Float(1)));

		// Red
		EXPECT_TRUE(ExpectNear(data[i++], Math::Float(1)));
		EXPECT_TRUE(ExpectNear(data[i++], Math::Float(0)));
		EXPECT_TRUE(ExpectNear(data[i++], Math::Float(0)));

		// Blue
		EXPECT_TRUE(ExpectNear(data[i++], Math::Float(0)));
		EXPECT_TRUE(ExpectNear(data[i++], Math::Float(0)));
		EXPECT_TRUE(ExpectNear(data[i++], Math::Float(1)));

		// Black
		EXPECT_TRUE(ExpectNear(data[i++], Math::Float(0)));
		EXPECT_TRUE(ExpectNear(data[i++], Math::Float(0)));
		EXPECT_TRUE(ExpectNear(data[i++], Math::Float(0)));
	}
}

TEST_F(BitmapTextureTest, Load_VerticalFlip)
{
	TemporaryBinaryFile tmp("test." + Extension[0], Data[0], Length[0]);
	EXPECT_TRUE(texture.Load(GenerateNode(tmp.Path(), TextureNode_VerticalFlipTest), assets));

	// Check data
	size_t i = 0;
	const auto& data = texture.Bitmap().InternalData();

	// Blue
	EXPECT_TRUE(ExpectNear(data[i++], Math::Float(0)));
	EXPECT_TRUE(ExpectNear(data[i++], Math::Float(0)));
	EXPECT_TRUE(ExpectNear(data[i++], Math::Float(1)));

	// Black
	EXPECT_TRUE(ExpectNear(data[i++], Math::Float(0)));
	EXPECT_TRUE(ExpectNear(data[i++], Math::Float(0)));
	EXPECT_TRUE(ExpectNear(data[i++], Math::Float(0)));

	// White
	EXPECT_TRUE(ExpectNear(data[i++], Math::Float(1)));
	EXPECT_TRUE(ExpectNear(data[i++], Math::Float(1)));
	EXPECT_TRUE(ExpectNear(data[i++], Math::Float(1)));

	// Red
	EXPECT_TRUE(ExpectNear(data[i++], Math::Float(1)));
	EXPECT_TRUE(ExpectNear(data[i++], Math::Float(0)));
	EXPECT_TRUE(ExpectNear(data[i++], Math::Float(0)));
}

TEST_F(BitmapTextureTest, Load_VerticalFlip_2)
{
	TemporaryBinaryFile tmp("test." + Extension[0], Data[0], Length[0]);
	EXPECT_TRUE(texture.LoadAsset(tmp.Path(), true));

	// Check data
	size_t i = 0;
	const auto& data = texture.Bitmap().InternalData();

	// Blue
	EXPECT_TRUE(ExpectNear(data[i++], Math::Float(0)));
	EXPECT_TRUE(ExpectNear(data[i++], Math::Float(0)));
	EXPECT_TRUE(ExpectNear(data[i++], Math::Float(1)));

	// Black
	EXPECT_TRUE(ExpectNear(data[i++], Math::Float(0)));
	EXPECT_TRUE(ExpectNear(data[i++], Math::Float(0)));
	EXPECT_TRUE(ExpectNear(data[i++], Math::Float(0)));

	// White
	EXPECT_TRUE(ExpectNear(data[i++], Math::Float(1)));
	EXPECT_TRUE(ExpectNear(data[i++], Math::Float(1)));
	EXPECT_TRUE(ExpectNear(data[i++], Math::Float(1)));

	// Red
	EXPECT_TRUE(ExpectNear(data[i++], Math::Float(1)));
	EXPECT_TRUE(ExpectNear(data[i++], Math::Float(0)));
	EXPECT_TRUE(ExpectNear(data[i++], Math::Float(0)));
}

LM_TEST_NAMESPACE_END
LM_NAMESPACE_END
